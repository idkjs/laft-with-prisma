# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Company implements Node {
  id: ID!
  name: String
  url: String!
  logo: String
  employees: String
  tranch: String
  description: String!
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  postedBy(where: UserWhereInput): User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type Vote implements Node {
  id: ID!
  company(where: CompanyWhereInput): Company!
  user(where: UserWhereInput): User!
}


#
# Other Types
#

type AggregateCompany {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  name: String
  url: String!
  logo: String
  employees: String
  tranch: String
  description: String!
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  postedBy: UserCreateOneWithoutCompaniesInput
  votes: VoteCreateManyWithoutCompanyInput
}

input CompanyCreateManyWithoutPostedByInput {
  create: [CompanyCreateWithoutPostedByInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutVotesInput {
  create: CompanyCreateWithoutVotesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutPostedByInput {
  name: String
  url: String!
  logo: String
  employees: String
  tranch: String
  description: String!
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  votes: VoteCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutVotesInput {
  name: String
  url: String!
  logo: String
  employees: String
  tranch: String
  description: String!
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  postedBy: UserCreateOneWithoutCompaniesInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  logo_ASC
  logo_DESC
  employees_ASC
  employees_DESC
  tranch_ASC
  tranch_DESC
  description_ASC
  description_DESC
  location_ASC
  location_DESC
  address_ASC
  address_DESC
  jobs_ASC
  jobs_DESC
  jobslink_ASC
  jobslink_DESC
  sector_ASC
  sector_DESC
  twitter_ASC
  twitter_DESC
  facebook_ASC
  facebook_DESC
  instagram_ASC
  instagram_DESC
  youtube_ASC
  youtube_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String
  url: String!
  logo: String
  employees: String
  tranch: String
  description: String!
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  name: String
  url: String
  logo: String
  employees: String
  tranch: String
  description: String
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  postedBy: UserUpdateOneWithoutCompaniesInput
  votes: VoteUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyWithoutPostedByInput {
  create: [CompanyCreateWithoutPostedByInput!]
  connect: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithoutPostedByInput!]
  upsert: [CompanyUpsertWithoutPostedByInput!]
}

input CompanyUpdateOneWithoutVotesInput {
  create: CompanyCreateWithoutVotesInput
  connect: CompanyWhereUniqueInput
  disconnect: CompanyWhereUniqueInput
  delete: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutVotesInput
  upsert: CompanyUpsertWithoutVotesInput
}

input CompanyUpdateWithoutPostedByDataInput {
  name: String
  url: String
  logo: String
  employees: String
  tranch: String
  description: String
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  votes: VoteUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutPostedByInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutPostedByDataInput!
}

input CompanyUpdateWithoutVotesDataInput {
  name: String
  url: String
  logo: String
  employees: String
  tranch: String
  description: String
  location: String
  address: String
  jobs: String
  jobslink: String
  sector: String
  twitter: String
  facebook: String
  instagram: String
  youtube: String
  postedBy: UserUpdateOneWithoutCompaniesInput
}

input CompanyUpdateWithoutVotesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutVotesDataInput!
}

input CompanyUpsertWithoutPostedByInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutPostedByDataInput!
  create: CompanyCreateWithoutPostedByInput!
}

input CompanyUpsertWithoutVotesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutVotesDataInput!
  create: CompanyCreateWithoutVotesInput!
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  employees: String
  employees_not: String
  employees_in: [String!]
  employees_not_in: [String!]
  employees_lt: String
  employees_lte: String
  employees_gt: String
  employees_gte: String
  employees_contains: String
  employees_not_contains: String
  employees_starts_with: String
  employees_not_starts_with: String
  employees_ends_with: String
  employees_not_ends_with: String
  tranch: String
  tranch_not: String
  tranch_in: [String!]
  tranch_not_in: [String!]
  tranch_lt: String
  tranch_lte: String
  tranch_gt: String
  tranch_gte: String
  tranch_contains: String
  tranch_not_contains: String
  tranch_starts_with: String
  tranch_not_starts_with: String
  tranch_ends_with: String
  tranch_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  jobs: String
  jobs_not: String
  jobs_in: [String!]
  jobs_not_in: [String!]
  jobs_lt: String
  jobs_lte: String
  jobs_gt: String
  jobs_gte: String
  jobs_contains: String
  jobs_not_contains: String
  jobs_starts_with: String
  jobs_not_starts_with: String
  jobs_ends_with: String
  jobs_not_ends_with: String
  jobslink: String
  jobslink_not: String
  jobslink_in: [String!]
  jobslink_not_in: [String!]
  jobslink_lt: String
  jobslink_lte: String
  jobslink_gt: String
  jobslink_gte: String
  jobslink_contains: String
  jobslink_not_contains: String
  jobslink_starts_with: String
  jobslink_not_starts_with: String
  jobslink_ends_with: String
  jobslink_not_ends_with: String
  sector: String
  sector_not: String
  sector_in: [String!]
  sector_not_in: [String!]
  sector_lt: String
  sector_lte: String
  sector_gt: String
  sector_gte: String
  sector_contains: String
  sector_not_contains: String
  sector_starts_with: String
  sector_not_starts_with: String
  sector_ends_with: String
  sector_not_ends_with: String
  twitter: String
  twitter_not: String
  twitter_in: [String!]
  twitter_not_in: [String!]
  twitter_lt: String
  twitter_lte: String
  twitter_gt: String
  twitter_gte: String
  twitter_contains: String
  twitter_not_contains: String
  twitter_starts_with: String
  twitter_not_starts_with: String
  twitter_ends_with: String
  twitter_not_ends_with: String
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  instagram: String
  instagram_not: String
  instagram_in: [String!]
  instagram_not_in: [String!]
  instagram_lt: String
  instagram_lte: String
  instagram_gt: String
  instagram_gte: String
  instagram_contains: String
  instagram_not_contains: String
  instagram_starts_with: String
  instagram_not_starts_with: String
  instagram_ends_with: String
  instagram_not_ends_with: String
  youtube: String
  youtube_not: String
  youtube_in: [String!]
  youtube_not_in: [String!]
  youtube_lt: String
  youtube_lte: String
  youtube_gt: String
  youtube_gte: String
  youtube_contains: String
  youtube_not_contains: String
  youtube_starts_with: String
  youtube_not_starts_with: String
  youtube_ends_with: String
  youtube_not_ends_with: String
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  createVote(data: VoteCreateInput!): Vote!
  createUser(data: UserCreateInput!): User!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCompanies(data: CompanyUpdateInput!, where: CompanyWhereInput!): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput!): BatchPayload!
  deleteManyVotes(where: VoteWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  company(where: CompanyWhereUniqueInput!): Company
  vote(where: VoteWhereUniqueInput!): Vote
  user(where: UserWhereUniqueInput!): User
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  companies: CompanyCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompaniesInput {
  name: String!
  email: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  name: String!
  email: String!
  password: String!
  companies: CompanyCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  companies: CompanyUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutCompaniesInput
  upsert: UserUpsertWithoutCompaniesInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutVotesInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutCompaniesDataInput {
  name: String
  email: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutCompaniesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompaniesDataInput!
}

input UserUpdateWithoutVotesDataInput {
  name: String
  email: String
  password: String
  companies: CompanyUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutVotesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutVotesDataInput!
}

input UserUpsertWithoutCompaniesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompaniesDataInput!
  create: UserCreateWithoutCompaniesInput!
}

input UserUpsertWithoutVotesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  company: CompanyCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutCompanyInput {
  create: [VoteCreateWithoutCompanyInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutCompanyInput {
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  company: CompanyCreateOneWithoutVotesInput!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  company: CompanyUpdateOneWithoutVotesInput
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutCompanyInput {
  create: [VoteCreateWithoutCompanyInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutCompanyInput!]
  upsert: [VoteUpsertWithoutCompanyInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutUserInput!]
  upsert: [VoteUpsertWithoutUserInput!]
}

input VoteUpdateWithoutCompanyDataInput {
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutCompanyInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCompanyDataInput!
}

input VoteUpdateWithoutUserDataInput {
  company: CompanyUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithoutCompanyInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCompanyDataInput!
  create: VoteCreateWithoutCompanyInput!
}

input VoteUpsertWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  company: CompanyWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
